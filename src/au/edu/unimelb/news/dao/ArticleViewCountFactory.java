/* Generated by DaoGen version 0.1
 *
 * DO NOT EDIT THIS FILE. This file was automatically
 * generated, any changes made to this fill will be
 * lost if the file is re-generated.
 */
package au.edu.unimelb.news.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.util.Date;

public class ArticleViewCountFactory {

	private DataSource dataSource=null;

	public ArticleViewCountFactory(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	/**
	 * Setup is called during factory initialization to 
	 * allow any initialization to be done before this 
	 * factory object is used.
	 */
	public void setup() throws IOException {

		//Create the database table if it does not exist.
		Connection c=null;
		PreparedStatement s=null;
		try {
			c=dataSource.getConnection();
			s=c.prepareStatement(
				"create table if not exists article_view_count (" +
				"id bigint auto_increment primary key,"+
				"article_id bigint,"+
				"views bigint"+
				")DEFAULT CHARSET=utf8 ENGINE=innodb");
			s.execute();
			s.close();
			s=null;
		} catch(SQLException e) {
			if(s!=null) { try { s.close(); } catch(Exception f){} }
			if(!e.toString().contains("ORA-00955")) {
			if(c!=null) { try { c.close(); } catch(Exception f){} }
				throw new IOException(e.toString());
			}
		}

		if(c!=null) { try { c.close(); } catch(Exception f){} }
	}

	/**
	 * Post-setup is called when the DAO layer has completed 
	 * initalisation of all DAO objects. 
	 */
	public void postSetup() throws IOException {

    }

    /**
     * Retrieve an object from the <i>Article View Count</i> data source. 
     */
    public ArticleViewCount get(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        ArticleViewCount item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id,article_id,views "+
                "from article_view_count " +
                "where id=?");
            s.setLong(1,id);
            results=s.executeQuery();
            if(results.next()) {
                item=new ArticleViewCount();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setViews(results.getLong(3));
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Retrieve a list of objects from the <i>Article View Count</i>
     * data source. 
     */
    public List<ArticleViewCount> getAll(long index, long limit) throws IOException {
        List<ArticleViewCount> list=new ArrayList<ArticleViewCount>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, views "+
                "from article_view_count " +
                "order by id " +
                "limit "+index+","+limit
                );
            results=s.executeQuery();
            while(results.next()) {
                ArticleViewCount item=new ArticleViewCount();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setViews(results.getLong(3));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Permanently remove an object from the <i>Article View Count</i>
     * data source. 
     */
    public void delete(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article_view_count "+
                "where id=?");
            s.setLong(1,id);
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Permanently remove all objects from the <i>Article View Count</i>
     * data source. 
     */
    public void deleteAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement("delete from article_view_count"); 
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Add a new <i>Article View Count</i> object to the data source. 
     */
    public ArticleViewCount insert(ArticleViewCount item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();

			s=c.prepareStatement(
				"insert into article_view_count ("+
					((item.getId()>0)?"id, ":"")+
                    "article_id, "+
                    "views) "+
                "values("+(item.getId()>0?"?,":"")+"?,?)");
			if(item.getId()>0) {
			s.setLong(1,item.getId());
            s.setLong(2,item.getArticleId());
            s.setLong(3,item.getViews());
			} else {
            s.setLong(1,item.getArticleId());
            s.setLong(2,item.getViews());
			}
            s.execute();
            // Discover the unique id allocated to the new record
            ResultSet r = s.getGeneratedKeys();
            if (r.next()) {
            	item.setId(r.getInt(1));
            }
            r.close();
            r=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            System.err.println("Problem duing inserting into table article_view_count. "+
                "article_id="+item.getArticleId()+", "+ 
                "views="+item.getViews()+", "+ 
        "");
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Update an object of type <i>Article View Count</i> the 
     * data source. 
     */
    public void update(ArticleViewCount item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "update article_view_count set article_id=?, views=? "+
                "where id=?");
            s.setLong(1,item.getArticleId());
            s.setLong(2,item.getViews());
            s.setLong(3,item.getId());
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

	/**
	 * Count the number of objects from the <i>Article View Count</i>
	 * data source. 
	 */
	public long countAll() throws IOException {
		Connection c=null;
		PreparedStatement s=null;
		ResultSet results=null;
		long count=0;
		try {
			c=dataSource.getConnection();
			s=c.prepareStatement(
				"select count(1) "+
				"from article_view_count "
				);
			results=s.executeQuery();
			if(results.next())
				count=results.getLong(1);
			results.close();
			results=null;
			s.close();
			s=null;
			c.close();
			c=null;
		} catch(SQLException e) {
			if(results!=null) { try { results.close(); } catch(Exception f){} }
			if(s!=null) { try { s.close(); } catch(Exception f){} }
			if(c!=null) { try { c.close(); } catch(Exception f){} }
			throw new IOException(e.toString());
		}

		return count;
	}

    /**
     * Retrieve a set from the Article View Count data source
     * matching on articleId. 
     *
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<ArticleViewCount> getByArticleId(Long articleId,  long index, long limit) throws IOException {
        List<ArticleViewCount> list=new ArrayList<ArticleViewCount>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        ArticleViewCount item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, views "+
                "from article_view_count " +
                "where article_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new ArticleViewCount();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setViews(results.getLong(3));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article View Count</i> data source
     * matching on Article Id. 
     *
     * @param articleId Value to match on Article Id.
     */
    public long countByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article_view_count " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article View Count data source
     * matching on Article Id. 
     *
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article_view_count " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article View Count data source
     * matching on views. 
     *
     * @param views Value to match on Views.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<ArticleViewCount> getByViews(Long views,  long index, long limit) throws IOException {
        List<ArticleViewCount> list=new ArrayList<ArticleViewCount>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        ArticleViewCount item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, views "+
                "from article_view_count " +
                "where views=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,views);
            results=s.executeQuery();
            while(results.next()) {
                item=new ArticleViewCount();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setViews(results.getLong(3));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article View Count</i> data source
     * matching on Views. 
     *
     * @param views Value to match on Views.
     */
    public long countByViews(Long views) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article_view_count " +
                "where views=? " +
                "");
            s.setLong(1,views);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article View Count data source
     * matching on Views. 
     *
     * @param Views Value to match on Views.
     */
    public long deleteByViews(Long views) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article_view_count " +
                "where views=? " +
                "");
            s.setLong(1,views);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article View Count data source
     * matching on articleId views. 
     *
     * @param articleId Value to match on Article Id.
     * @param views Value to match on Views.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<ArticleViewCount> getByArticleIdViews(Long articleId, Long views,  long index, long limit) throws IOException {
        List<ArticleViewCount> list=new ArrayList<ArticleViewCount>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        ArticleViewCount item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, views "+
                "from article_view_count " +
                "where article_id=? and views=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            s.setLong(2,views);
            results=s.executeQuery();
            while(results.next()) {
                item=new ArticleViewCount();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setViews(results.getLong(3));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article View Count</i> data source
     * matching on Article Id Views. 
     *
     * @param articleId Value to match on Article Id.
     * @param views Value to match on Views.
     */
    public long countByArticleIdViews(Long articleId, Long views) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article_view_count " +
                "where article_id=? and views=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,views);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article View Count data source
     * matching on Article Id Views. 
     *
     * @param ArticleId Value to match on Article Id.
     * @param Views Value to match on Views.
     */
    public long deleteByArticleIdViews(Long articleId, Long views) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article_view_count " +
                "where article_id=? and views=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,views);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }


}

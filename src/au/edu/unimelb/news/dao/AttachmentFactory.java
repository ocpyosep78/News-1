/* Generated by DaoGen version 0.1
 *
 * DO NOT EDIT THIS FILE. This file was automatically
 * generated, any changes made to this fill will be
 * lost if the file is re-generated.
 */
package au.edu.unimelb.news.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.util.Date;

public class AttachmentFactory {

    private DataSource dataSource=null;

    public AttachmentFactory(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    /**
     * Setup is called during factory initialization to 
     * allow any initialization to be done before this 
     * factory object is used.
     */
    public void setup() throws IOException {

        //Create the database table if it does not exist.
        Connection c=null;
        PreparedStatement s=null;
		try {
			c=dataSource.getConnection();
			s=c.prepareStatement(
				"create table if not exists attachment (" +
				"id bigint auto_increment primary key,"+
                "article_id bigint,"+
                "name varchar(250),"+
                "size bigint,"+
                "disk_name varchar(250)"+
				")DEFAULT CHARSET=utf8 ENGINE=innodb");
            s.execute();
            s.close();
            s=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(!e.toString().contains("ORA-00955")) {
                if(c!=null) { try { c.close(); } catch(Exception f){} }
                throw new IOException(e.toString());
            }
        }

        if(c!=null) { try { c.close(); } catch(Exception f){} }
    }

    /**
     * Post-setup is called when the DAO layer has completed 
     * initalisation of all DAO objects. 
     */
    public void postSetup() throws IOException {

    }

    /**
     * Retrieve an object from the <i>Attachment</i> data source. 
     */
    public Attachment get(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id,article_id,name,size,disk_name "+
                "from attachment " +
                "where id=?");
            s.setLong(1,id);
            results=s.executeQuery();
            if(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Retrieve a list of objects from the <i>Attachment</i>
     * data source. 
     */
    public List<Attachment> getAll(long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "order by name " +
                "limit "+index+","+limit
                );
            results=s.executeQuery();
            while(results.next()) {
                Attachment item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Permanently remove an object from the <i>Attachment</i>
     * data source. 
     */
    public void delete(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment "+
                "where id=?");
            s.setLong(1,id);
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Permanently remove all objects from the <i>Attachment</i>
     * data source. 
     */
    public void deleteAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement("delete from attachment"); 
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Add a new <i>Attachment</i> object to the data source. 
     */
    public Attachment insert(Attachment item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();

            s=c.prepareStatement(
                "insert into attachment ("+
                    "article_id, "+
                    "name, "+
                    "size, "+
                    "disk_name) "+
                "values(?,?,?,?)");
            s.setLong(1,item.getArticleId());
            s.setString(2,item.getName());
            s.setLong(3,item.getSize());
            s.setString(4,item.getDiskName());
            s.execute();
            // Discover the unique id allocated to the new record
            ResultSet r = s.getGeneratedKeys();
            if (r.next()) {
            	item.setId(r.getInt(1));
            }
            r.close();
            r=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            System.err.println("Problem duing inserting into table attachment. "+
                "article_id="+item.getArticleId()+", "+ 
                "name="+item.getName()+", "+ 
                "size="+item.getSize()+", "+ 
                "disk_name="+item.getDiskName()+", "+ 
        "");
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Update an object of type <i>Attachment</i> the 
     * data source. 
     */
    public void update(Attachment item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "update attachment set article_id=?, name=?, size=?, disk_name=? "+
                "where id=?");
            s.setLong(1,item.getArticleId());
            s.setString(2,item.getName());
            s.setLong(3,item.getSize());
            s.setString(4,item.getDiskName());
            s.setLong(5,item.getId());
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Count the number of objects from the <i>Attachment</i>
     * data source. 
     */
    public long countAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        long count=0;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(1) "+
                "from attachment "
                );
            results=s.executeQuery();
            if(results.next())
                count=results.getLong(1);
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return count;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on size. 
     *
     * @param size Value to match on Size.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getBySize(Long size,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where size=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,size);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Size. 
     *
     * @param size Value to match on Size.
     */
    public long countBySize(Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where size=? " +
                "");
            s.setLong(1,size);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Size. 
     *
     * @param Size Value to match on Size.
     */
    public long deleteBySize(Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where size=? " +
                "");
            s.setLong(1,size);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on diskName. 
     *
     * @param diskName Value to match on Disk Name.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByDiskName(String diskName,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where disk_name=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,diskName);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Disk Name. 
     *
     * @param diskName Value to match on Disk Name.
     */
    public long countByDiskName(String diskName) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where disk_name=? " +
                "");
            s.setString(1,diskName);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Disk Name. 
     *
     * @param DiskName Value to match on Disk Name.
     */
    public long deleteByDiskName(String diskName) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where disk_name=? " +
                "");
            s.setString(1,diskName);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on name articleId. 
     *
     * @param name Value to match on Name.
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByNameArticleId(String name, Long articleId,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where name=? and article_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setLong(2,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Name Article Id. 
     *
     * @param name Value to match on Name.
     * @param articleId Value to match on Article Id.
     */
    public long countByNameArticleId(String name, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where name=? and article_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Name Article Id. 
     *
     * @param Name Value to match on Name.
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByNameArticleId(String name, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where name=? and article_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on articleId size. 
     *
     * @param articleId Value to match on Article Id.
     * @param size Value to match on Size.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByArticleIdSize(Long articleId, Long size,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where article_id=? and size=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            s.setLong(2,size);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Article Id Size. 
     *
     * @param articleId Value to match on Article Id.
     * @param size Value to match on Size.
     */
    public long countByArticleIdSize(Long articleId, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where article_id=? and size=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,size);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Article Id Size. 
     *
     * @param ArticleId Value to match on Article Id.
     * @param Size Value to match on Size.
     */
    public long deleteByArticleIdSize(Long articleId, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where article_id=? and size=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,size);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on diskName articleId. 
     *
     * @param diskName Value to match on Disk Name.
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByDiskNameArticleId(String diskName, Long articleId,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where disk_name=? and article_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,diskName);
            s.setLong(2,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Disk Name Article Id. 
     *
     * @param diskName Value to match on Disk Name.
     * @param articleId Value to match on Article Id.
     */
    public long countByDiskNameArticleId(String diskName, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where disk_name=? and article_id=? " +
                "");
            s.setString(1,diskName);
            s.setLong(2,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Disk Name Article Id. 
     *
     * @param DiskName Value to match on Disk Name.
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByDiskNameArticleId(String diskName, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where disk_name=? and article_id=? " +
                "");
            s.setString(1,diskName);
            s.setLong(2,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on name size. 
     *
     * @param name Value to match on Name.
     * @param size Value to match on Size.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByNameSize(String name, Long size,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where name=? and size=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setLong(2,size);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Name Size. 
     *
     * @param name Value to match on Name.
     * @param size Value to match on Size.
     */
    public long countByNameSize(String name, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where name=? and size=? " +
                "");
            s.setString(1,name);
            s.setLong(2,size);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Name Size. 
     *
     * @param Name Value to match on Name.
     * @param Size Value to match on Size.
     */
    public long deleteByNameSize(String name, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where name=? and size=? " +
                "");
            s.setString(1,name);
            s.setLong(2,size);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on name diskName. 
     *
     * @param name Value to match on Name.
     * @param diskName Value to match on Disk Name.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByNameDiskName(String name, String diskName,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where name=? and disk_name=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setString(2,diskName);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Name Disk Name. 
     *
     * @param name Value to match on Name.
     * @param diskName Value to match on Disk Name.
     */
    public long countByNameDiskName(String name, String diskName) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where name=? and disk_name=? " +
                "");
            s.setString(1,name);
            s.setString(2,diskName);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Name Disk Name. 
     *
     * @param Name Value to match on Name.
     * @param DiskName Value to match on Disk Name.
     */
    public long deleteByNameDiskName(String name, String diskName) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where name=? and disk_name=? " +
                "");
            s.setString(1,name);
            s.setString(2,diskName);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on diskName size. 
     *
     * @param diskName Value to match on Disk Name.
     * @param size Value to match on Size.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByDiskNameSize(String diskName, Long size,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where disk_name=? and size=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,diskName);
            s.setLong(2,size);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Disk Name Size. 
     *
     * @param diskName Value to match on Disk Name.
     * @param size Value to match on Size.
     */
    public long countByDiskNameSize(String diskName, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where disk_name=? and size=? " +
                "");
            s.setString(1,diskName);
            s.setLong(2,size);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Disk Name Size. 
     *
     * @param DiskName Value to match on Disk Name.
     * @param Size Value to match on Size.
     */
    public long deleteByDiskNameSize(String diskName, Long size) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where disk_name=? and size=? " +
                "");
            s.setString(1,diskName);
            s.setLong(2,size);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on name. 
     *
     * @param name Value to match on Name.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByName(String name,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where name=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Name. 
     *
     * @param name Value to match on Name.
     */
    public long countByName(String name) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where name=? " +
                "");
            s.setString(1,name);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Name. 
     *
     * @param Name Value to match on Name.
     */
    public long deleteByName(String name) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where name=? " +
                "");
            s.setString(1,name);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Attachment data source
     * matching on articleId. 
     *
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Attachment> getByArticleId(Long articleId,  long index, long limit) throws IOException {
        List<Attachment> list=new ArrayList<Attachment>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Attachment item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, article_id, name, size, disk_name "+
                "from attachment " +
                "where article_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Attachment();
                item.setId(results.getLong(1));
                item.setArticleId(results.getLong(2));
                item.setName(results.getString(3));
                item.setSize(results.getLong(4));
                item.setDiskName(results.getString(5));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Attachment</i> data source
     * matching on Article Id. 
     *
     * @param articleId Value to match on Article Id.
     */
    public long countByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from attachment " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Attachment data source
     * matching on Article Id. 
     *
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from attachment " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }


}

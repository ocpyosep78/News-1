/* Generated by DaoGen version 0.1
 *
 * DO NOT EDIT THIS FILE. This file was automatically
 * generated, any changes made to this fill will be
 * lost if the file is re-generated.
 */
package au.edu.unimelb.news.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.util.Date;

public class NewsletterArticleFactory {

    private DataSource dataSource=null;

    public NewsletterArticleFactory(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    /**
     * Setup is called during factory initialization to 
     * allow any initialization to be done before this 
     * factory object is used.
     */
    public void setup() throws IOException {

        //Create the database table if it does not exist.
        Connection c=null;
        PreparedStatement s=null;
		try {
			c=dataSource.getConnection();
			s=c.prepareStatement(
				"create table if not exists newsletter_article (" +
				"id bigint auto_increment primary key,"+
                "newsletter_id bigint,"+
                "article_id bigint,"+
                "sort_order bigint,"+
                "type varchar(50),"+
                "picture varchar(50)"+
				")DEFAULT CHARSET=utf8 ENGINE=innodb");
            s.execute();
            s.close();
            s=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(!e.toString().contains("ORA-00955")) {
                if(c!=null) { try { c.close(); } catch(Exception f){} }
                throw new IOException(e.toString());
            }
        }

        if(c!=null) { try { c.close(); } catch(Exception f){} }
    }

    /**
     * Post-setup is called when the DAO layer has completed 
     * initalisation of all DAO objects. 
     */
    public void postSetup() throws IOException {

    }

    /**
     * Retrieve an object from the <i>Newsletter Article</i> data source. 
     */
    public NewsletterArticle get(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id,newsletter_id,article_id,sort_order,type,picture "+
                "from newsletter_article " +
                "where id=?");
            s.setLong(1,id);
            results=s.executeQuery();
            if(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Retrieve a list of objects from the <i>Newsletter Article</i>
     * data source. 
     */
    public List<NewsletterArticle> getAll(long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "order by id " +
                "limit "+index+","+limit
                );
            results=s.executeQuery();
            while(results.next()) {
                NewsletterArticle item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Permanently remove an object from the <i>Newsletter Article</i>
     * data source. 
     */
    public void delete(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article "+
                "where id=?");
            s.setLong(1,id);
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Permanently remove all objects from the <i>Newsletter Article</i>
     * data source. 
     */
    public void deleteAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement("delete from newsletter_article"); 
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Add a new <i>Newsletter Article</i> object to the data source. 
     */
    public NewsletterArticle insert(NewsletterArticle item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();

			s=c.prepareStatement(
				"insert into newsletter_article ("+
					((item.getId()>0)?"id, ":"")+
                    "newsletter_id, "+
                    "article_id, "+
                    "sort_order, "+
                    "type, "+
                    "picture) "+
                "values("+(item.getId()>0?"?,":"")+"?,?,?,?,?)");
			if(item.getId()>0) {
			s.setLong(1,item.getId());
            s.setLong(2,item.getNewsletterId());
            s.setLong(3,item.getArticleId());
            s.setLong(4,item.getSortOrder());
            s.setString(5,item.getType());
            s.setString(6,item.getPicture());
			} else {
            s.setLong(1,item.getNewsletterId());
            s.setLong(2,item.getArticleId());
            s.setLong(3,item.getSortOrder());
            s.setString(4,item.getType());
            s.setString(5,item.getPicture());
			}
            s.execute();
            // Discover the unique id allocated to the new record
            ResultSet r = s.getGeneratedKeys();
            if (r.next()) {
            	item.setId(r.getInt(1));
            }
            r.close();
            r=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            System.err.println("Problem duing inserting into table newsletter_article. "+
                "newsletter_id="+item.getNewsletterId()+", "+ 
                "article_id="+item.getArticleId()+", "+ 
                "sort_order="+item.getSortOrder()+", "+ 
                "type="+item.getType()+", "+ 
                "picture="+item.getPicture()+", "+ 
        "");
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Update an object of type <i>Newsletter Article</i> the 
     * data source. 
     */
    public void update(NewsletterArticle item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "update newsletter_article set newsletter_id=?, article_id=?, sort_order=?, type=?, picture=? "+
                "where id=?");
            s.setLong(1,item.getNewsletterId());
            s.setLong(2,item.getArticleId());
            s.setLong(3,item.getSortOrder());
            s.setString(4,item.getType());
            s.setString(5,item.getPicture());
            s.setLong(6,item.getId());
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Count the number of objects from the <i>Newsletter Article</i>
     * data source. 
     */
    public long countAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        long count=0;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(1) "+
                "from newsletter_article "
                );
            results=s.executeQuery();
            if(results.next())
                count=results.getLong(1);
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return count;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on newsletterId. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByNewsletterId(Long newsletterId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where newsletter_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,newsletterId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Newsletter Id. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     */
    public long countByNewsletterId(Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where newsletter_id=? " +
                "");
            s.setLong(1,newsletterId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Newsletter Id. 
     *
     * @param NewsletterId Value to match on Newsletter Id.
     */
    public long deleteByNewsletterId(Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where newsletter_id=? " +
                "");
            s.setLong(1,newsletterId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on articleId. 
     *
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByArticleId(Long articleId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where article_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Article Id. 
     *
     * @param articleId Value to match on Article Id.
     */
    public long countByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Article Id. 
     *
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByArticleId(Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where article_id=? " +
                "");
            s.setLong(1,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on sortOrder. 
     *
     * @param sortOrder Value to match on Sort Order.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getBySortOrder(Long sortOrder,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where sort_order=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,sortOrder);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Sort Order. 
     *
     * @param sortOrder Value to match on Sort Order.
     */
    public long countBySortOrder(Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where sort_order=? " +
                "");
            s.setLong(1,sortOrder);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Sort Order. 
     *
     * @param SortOrder Value to match on Sort Order.
     */
    public long deleteBySortOrder(Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where sort_order=? " +
                "");
            s.setLong(1,sortOrder);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on type. 
     *
     * @param type Value to match on Type.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByType(String type,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where type=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,type);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Type. 
     *
     * @param type Value to match on Type.
     */
    public long countByType(String type) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where type=? " +
                "");
            s.setString(1,type);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Type. 
     *
     * @param Type Value to match on Type.
     */
    public long deleteByType(String type) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where type=? " +
                "");
            s.setString(1,type);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on picture. 
     *
     * @param picture Value to match on Picture.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByPicture(String picture,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where picture=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,picture);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Picture. 
     *
     * @param picture Value to match on Picture.
     */
    public long countByPicture(String picture) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where picture=? " +
                "");
            s.setString(1,picture);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Picture. 
     *
     * @param Picture Value to match on Picture.
     */
    public long deleteByPicture(String picture) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where picture=? " +
                "");
            s.setString(1,picture);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on newsletterId articleId. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByNewsletterIdArticleId(Long newsletterId, Long articleId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where newsletter_id=? and article_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,newsletterId);
            s.setLong(2,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Newsletter Id Article Id. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     * @param articleId Value to match on Article Id.
     */
    public long countByNewsletterIdArticleId(Long newsletterId, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where newsletter_id=? and article_id=? " +
                "");
            s.setLong(1,newsletterId);
            s.setLong(2,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Newsletter Id Article Id. 
     *
     * @param NewsletterId Value to match on Newsletter Id.
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByNewsletterIdArticleId(Long newsletterId, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where newsletter_id=? and article_id=? " +
                "");
            s.setLong(1,newsletterId);
            s.setLong(2,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on newsletterId sortOrder. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     * @param sortOrder Value to match on Sort Order.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByNewsletterIdSortOrder(Long newsletterId, Long sortOrder,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where newsletter_id=? and sort_order=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,newsletterId);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Newsletter Id Sort Order. 
     *
     * @param newsletterId Value to match on Newsletter Id.
     * @param sortOrder Value to match on Sort Order.
     */
    public long countByNewsletterIdSortOrder(Long newsletterId, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where newsletter_id=? and sort_order=? " +
                "");
            s.setLong(1,newsletterId);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Newsletter Id Sort Order. 
     *
     * @param NewsletterId Value to match on Newsletter Id.
     * @param SortOrder Value to match on Sort Order.
     */
    public long deleteByNewsletterIdSortOrder(Long newsletterId, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where newsletter_id=? and sort_order=? " +
                "");
            s.setLong(1,newsletterId);
            s.setLong(2,sortOrder);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on type newsletterId. 
     *
     * @param type Value to match on Type.
     * @param newsletterId Value to match on Newsletter Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByTypeNewsletterId(String type, Long newsletterId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where type=? and newsletter_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,type);
            s.setLong(2,newsletterId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Type Newsletter Id. 
     *
     * @param type Value to match on Type.
     * @param newsletterId Value to match on Newsletter Id.
     */
    public long countByTypeNewsletterId(String type, Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where type=? and newsletter_id=? " +
                "");
            s.setString(1,type);
            s.setLong(2,newsletterId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Type Newsletter Id. 
     *
     * @param Type Value to match on Type.
     * @param NewsletterId Value to match on Newsletter Id.
     */
    public long deleteByTypeNewsletterId(String type, Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where type=? and newsletter_id=? " +
                "");
            s.setString(1,type);
            s.setLong(2,newsletterId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on picture newsletterId. 
     *
     * @param picture Value to match on Picture.
     * @param newsletterId Value to match on Newsletter Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByPictureNewsletterId(String picture, Long newsletterId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where picture=? and newsletter_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,picture);
            s.setLong(2,newsletterId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Picture Newsletter Id. 
     *
     * @param picture Value to match on Picture.
     * @param newsletterId Value to match on Newsletter Id.
     */
    public long countByPictureNewsletterId(String picture, Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where picture=? and newsletter_id=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,newsletterId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Picture Newsletter Id. 
     *
     * @param Picture Value to match on Picture.
     * @param NewsletterId Value to match on Newsletter Id.
     */
    public long deleteByPictureNewsletterId(String picture, Long newsletterId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where picture=? and newsletter_id=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,newsletterId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on articleId sortOrder. 
     *
     * @param articleId Value to match on Article Id.
     * @param sortOrder Value to match on Sort Order.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByArticleIdSortOrder(Long articleId, Long sortOrder,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where article_id=? and sort_order=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setLong(1,articleId);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Article Id Sort Order. 
     *
     * @param articleId Value to match on Article Id.
     * @param sortOrder Value to match on Sort Order.
     */
    public long countByArticleIdSortOrder(Long articleId, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where article_id=? and sort_order=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Article Id Sort Order. 
     *
     * @param ArticleId Value to match on Article Id.
     * @param SortOrder Value to match on Sort Order.
     */
    public long deleteByArticleIdSortOrder(Long articleId, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where article_id=? and sort_order=? " +
                "");
            s.setLong(1,articleId);
            s.setLong(2,sortOrder);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on type articleId. 
     *
     * @param type Value to match on Type.
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByTypeArticleId(String type, Long articleId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where type=? and article_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,type);
            s.setLong(2,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Type Article Id. 
     *
     * @param type Value to match on Type.
     * @param articleId Value to match on Article Id.
     */
    public long countByTypeArticleId(String type, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where type=? and article_id=? " +
                "");
            s.setString(1,type);
            s.setLong(2,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Type Article Id. 
     *
     * @param Type Value to match on Type.
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByTypeArticleId(String type, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where type=? and article_id=? " +
                "");
            s.setString(1,type);
            s.setLong(2,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on picture articleId. 
     *
     * @param picture Value to match on Picture.
     * @param articleId Value to match on Article Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByPictureArticleId(String picture, Long articleId,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where picture=? and article_id=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,picture);
            s.setLong(2,articleId);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Picture Article Id. 
     *
     * @param picture Value to match on Picture.
     * @param articleId Value to match on Article Id.
     */
    public long countByPictureArticleId(String picture, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where picture=? and article_id=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,articleId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Picture Article Id. 
     *
     * @param Picture Value to match on Picture.
     * @param ArticleId Value to match on Article Id.
     */
    public long deleteByPictureArticleId(String picture, Long articleId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where picture=? and article_id=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,articleId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on type sortOrder. 
     *
     * @param type Value to match on Type.
     * @param sortOrder Value to match on Sort Order.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByTypeSortOrder(String type, Long sortOrder,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where type=? and sort_order=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,type);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Type Sort Order. 
     *
     * @param type Value to match on Type.
     * @param sortOrder Value to match on Sort Order.
     */
    public long countByTypeSortOrder(String type, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where type=? and sort_order=? " +
                "");
            s.setString(1,type);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Type Sort Order. 
     *
     * @param Type Value to match on Type.
     * @param SortOrder Value to match on Sort Order.
     */
    public long deleteByTypeSortOrder(String type, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where type=? and sort_order=? " +
                "");
            s.setString(1,type);
            s.setLong(2,sortOrder);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on picture sortOrder. 
     *
     * @param picture Value to match on Picture.
     * @param sortOrder Value to match on Sort Order.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByPictureSortOrder(String picture, Long sortOrder,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where picture=? and sort_order=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,picture);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Picture Sort Order. 
     *
     * @param picture Value to match on Picture.
     * @param sortOrder Value to match on Sort Order.
     */
    public long countByPictureSortOrder(String picture, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where picture=? and sort_order=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,sortOrder);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Picture Sort Order. 
     *
     * @param Picture Value to match on Picture.
     * @param SortOrder Value to match on Sort Order.
     */
    public long deleteByPictureSortOrder(String picture, Long sortOrder) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where picture=? and sort_order=? " +
                "");
            s.setString(1,picture);
            s.setLong(2,sortOrder);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Newsletter Article data source
     * matching on type picture. 
     *
     * @param type Value to match on Type.
     * @param picture Value to match on Picture.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<NewsletterArticle> getByTypePicture(String type, String picture,  long index, long limit) throws IOException {
        List<NewsletterArticle> list=new ArrayList<NewsletterArticle>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        NewsletterArticle item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, newsletter_id, article_id, sort_order, type, picture "+
                "from newsletter_article " +
                "where type=? and picture=? " +
                "order by id " +
                "limit "+index+","+limit
                );
            s.setString(1,type);
            s.setString(2,picture);
            results=s.executeQuery();
            while(results.next()) {
                item=new NewsletterArticle();
                item.setId(results.getLong(1));
                item.setNewsletterId(results.getLong(2));
                item.setArticleId(results.getLong(3));
                item.setSortOrder(results.getLong(4));
                item.setType(results.getString(5));
                item.setPicture(results.getString(6));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Newsletter Article</i> data source
     * matching on Type Picture. 
     *
     * @param type Value to match on Type.
     * @param picture Value to match on Picture.
     */
    public long countByTypePicture(String type, String picture) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from newsletter_article " +
                "where type=? and picture=? " +
                "");
            s.setString(1,type);
            s.setString(2,picture);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Newsletter Article data source
     * matching on Type Picture. 
     *
     * @param Type Value to match on Type.
     * @param Picture Value to match on Picture.
     */
    public long deleteByTypePicture(String type, String picture) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from newsletter_article " +
                "where type=? and picture=? " +
                "");
            s.setString(1,type);
            s.setString(2,picture);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }


}

/* Generated by DaoGen version 0.1
 *
 * DO NOT EDIT THIS FILE. This file was automatically
 * generated, any changes made to this fill will be
 * lost if the file is re-generated.
 */
package au.edu.unimelb.news.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.util.Date;

public class ArticleFactory {

    private DataSource dataSource=null;

    public ArticleFactory(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    /**
     * Setup is called during factory initialization to 
     * allow any initialization to be done before this 
     * factory object is used.
     */
    public void setup() throws IOException {

        //Create the database table if it does not exist.
        Connection c=null;
        PreparedStatement s=null;
		try {
			c=dataSource.getConnection();
			s=c.prepareStatement(
				"create table if not exists article (" +
				"id bigint auto_increment primary key,"+
                "publication_id bigint,"+
                "name varchar(250),"+
                "byline varchar(250),"+
                "introduction varchar(2000),"+
                "details varchar(18000),"+
                "status varchar(100),"+
                "deleted boolean,"+
                "published boolean,"+
                "last_update timestamp,"+
                "last_update_person_id bigint"+
				")DEFAULT CHARSET=utf8 ENGINE=innodb");
            s.execute();
            s.close();
            s=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(!e.toString().contains("ORA-00955")) {
                if(c!=null) { try { c.close(); } catch(Exception f){} }
                throw new IOException(e.toString());
            }
        }

        if(c!=null) { try { c.close(); } catch(Exception f){} }
    }

    /**
     * Post-setup is called when the DAO layer has completed 
     * initalisation of all DAO objects. 
     */
    public void postSetup() throws IOException {

    }

    /**
     * Retrieve an object from the <i>Article</i> data source. 
     */
    public Article get(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id,publication_id,name,byline,introduction,details,status,deleted,published,last_update,last_update_person_id "+
                "from article " +
                "where id=?");
            s.setLong(1,id);
            results=s.executeQuery();
            if(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getTimestamp(10));
                item.setLastUpdatePersonId(results.getLong(11));
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Retrieve a list of objects from the <i>Article</i>
     * data source. 
     */
    public List<Article> getAll(long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "order by name " +
                "limit "+index+","+limit
                );
            results=s.executeQuery();
            while(results.next()) {
                Article item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getTimestamp(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Permanently remove an object from the <i>Article</i>
     * data source. 
     */
    public void delete(long id) throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article "+
                "where id=?");
            s.setLong(1,id);
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Permanently remove all objects from the <i>Article</i>
     * data source. 
     */
    public void deleteAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement("delete from article"); 
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Add a new <i>Article</i> object to the data source. 
     */
    public Article insert(Article item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();

			s=c.prepareStatement(
				"insert into article ("+
					((item.getId()>0)?"id, ":"")+
                    "publication_id, "+
                    "name, "+
                    "byline, "+
                    "introduction, "+
                    "details, "+
                    "status, "+
                    "deleted, "+
                    "published, "+
                    "last_update, "+
                    "last_update_person_id) "+
                "values("+(item.getId()>0?"?,":"")+"?,?,?,?,?,?,?,?,?,?)");
			if(item.getId()>0) {
			s.setLong(1,item.getId());
            s.setLong(2,item.getPublicationId());
            s.setString(3,item.getName());
            s.setString(4,item.getByline());
            s.setString(5,item.getIntroduction());
            s.setString(6,item.getDetails());
            s.setString(7,item.getStatus());
            s.setBoolean(8,item.isDeleted());
            s.setBoolean(9,item.isPublished());
            s.setTimestamp(10,new java.sql.Timestamp(item.getLastUpdate().getTime()));
            s.setLong(11,item.getLastUpdatePersonId());
			} else {
            s.setLong(1,item.getPublicationId());
            s.setString(2,item.getName());
            s.setString(3,item.getByline());
            s.setString(4,item.getIntroduction());
            s.setString(5,item.getDetails());
            s.setString(6,item.getStatus());
            s.setBoolean(7,item.isDeleted());
            s.setBoolean(8,item.isPublished());
            s.setTimestamp(9,new java.sql.Timestamp(item.getLastUpdate().getTime()));
            s.setLong(10,item.getLastUpdatePersonId());
			}
            s.execute();
            // Discover the unique id allocated to the new record
            ResultSet r = s.getGeneratedKeys();
            if (r.next()) {
            	item.setId(r.getInt(1));
            }
            r.close();
            r=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            System.err.println("Problem duing inserting into table article. "+
                "publication_id="+item.getPublicationId()+", "+ 
                "name="+item.getName()+", "+ 
                "byline="+item.getByline()+", "+ 
                "introduction="+item.getIntroduction()+", "+ 
                "details="+item.getDetails()+", "+ 
                "status="+item.getStatus()+", "+ 
                "deleted="+item.isDeleted()+", "+ 
                "published="+item.isPublished()+", "+ 
                "last_update="+item.getLastUpdate()+", "+ 
                "last_update_person_id="+item.getLastUpdatePersonId()+", "+ 
        "");
            throw new IOException(e.toString());
        }

        return item;
    }

    /**
     * Update an object of type <i>Article</i> the 
     * data source. 
     */
    public void update(Article item) throws IOException {
        Connection c=null;
        PreparedStatement s=null;

        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "update article set publication_id=?, name=?, byline=?, introduction=?, details=?, status=?, deleted=?, published=?, last_update=?, last_update_person_id=? "+
                "where id=?");
            s.setLong(1,item.getPublicationId());
            s.setString(2,item.getName());
            s.setString(3,item.getByline());
            s.setString(4,item.getIntroduction());
            s.setString(5,item.getDetails());
            s.setString(6,item.getStatus());
            s.setBoolean(7,item.isDeleted());
            s.setBoolean(8,item.isPublished());
            s.setTimestamp(9,new java.sql.Timestamp(item.getLastUpdate().getTime()));
            s.setLong(10,item.getLastUpdatePersonId());
            s.setLong(11,item.getId());
            s.execute();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

    }

    /**
     * Count the number of objects from the <i>Article</i>
     * data source. 
     */
    public long countAll() throws IOException {
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        long count=0;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(1) "+
                "from article "
                );
            results=s.executeQuery();
            if(results.next())
                count=results.getLong(1);
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return count;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline. 
     *
     * @param byline Value to match on Byline.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByByline(String byline,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline. 
     *
     * @param byline Value to match on Byline.
     */
    public long countByByline(String byline) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? " +
                "");
            s.setString(1,byline);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline. 
     *
     * @param Byline Value to match on Byline.
     */
    public long deleteByByline(String byline) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? " +
                "");
            s.setString(1,byline);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction. 
     *
     * @param introduction Value to match on Introduction.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroduction(String introduction,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction. 
     *
     * @param introduction Value to match on Introduction.
     */
    public long countByIntroduction(String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? " +
                "");
            s.setString(1,introduction);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction. 
     *
     * @param Introduction Value to match on Introduction.
     */
    public long deleteByIntroduction(String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? " +
                "");
            s.setString(1,introduction);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details. 
     *
     * @param details Value to match on Details.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetails(String details,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details. 
     *
     * @param details Value to match on Details.
     */
    public long countByDetails(String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? " +
                "");
            s.setString(1,details);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details. 
     *
     * @param Details Value to match on Details.
     */
    public long deleteByDetails(String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? " +
                "");
            s.setString(1,details);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status. 
     *
     * @param status Value to match on Status.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatus(String status,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status. 
     *
     * @param status Value to match on Status.
     */
    public long countByStatus(String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? " +
                "");
            s.setString(1,status);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status. 
     *
     * @param Status Value to match on Status.
     */
    public long deleteByStatus(String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? " +
                "");
            s.setString(1,status);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on published. 
     *
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublished(Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setBoolean(1,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Published. 
     *
     * @param published Value to match on Published.
     */
    public long countByPublished(Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where published=? " +
                "");
            s.setBoolean(1,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Published. 
     *
     * @param Published Value to match on Published.
     */
    public long deleteByPublished(Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where published=? " +
                "");
            s.setBoolean(1,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdate. 
     *
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdate(Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update. 
     *
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByLastUpdate(Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update. 
     *
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByLastUpdate(Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdatePersonId. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdatePersonId(Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Person Id. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByLastUpdatePersonId(Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update_person_id=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Person Id. 
     *
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByLastUpdatePersonId(Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update_person_id=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name publicationId. 
     *
     * @param name Value to match on Name.
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNamePublicationId(String name, Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Publication Id. 
     *
     * @param name Value to match on Name.
     * @param publicationId Value to match on Publication Id.
     */
    public long countByNamePublicationId(String name, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and publication_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Publication Id. 
     *
     * @param Name Value to match on Name.
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByNamePublicationId(String name, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and publication_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline publicationId. 
     *
     * @param byline Value to match on Byline.
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylinePublicationId(String byline, Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Publication Id. 
     *
     * @param byline Value to match on Byline.
     * @param publicationId Value to match on Publication Id.
     */
    public long countByBylinePublicationId(String byline, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and publication_id=? " +
                "");
            s.setString(1,byline);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Publication Id. 
     *
     * @param Byline Value to match on Byline.
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByBylinePublicationId(String byline, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and publication_id=? " +
                "");
            s.setString(1,byline);
            s.setLong(2,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction publicationId. 
     *
     * @param introduction Value to match on Introduction.
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionPublicationId(String introduction, Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Publication Id. 
     *
     * @param introduction Value to match on Introduction.
     * @param publicationId Value to match on Publication Id.
     */
    public long countByIntroductionPublicationId(String introduction, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and publication_id=? " +
                "");
            s.setString(1,introduction);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Publication Id. 
     *
     * @param Introduction Value to match on Introduction.
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByIntroductionPublicationId(String introduction, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and publication_id=? " +
                "");
            s.setString(1,introduction);
            s.setLong(2,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details publicationId. 
     *
     * @param details Value to match on Details.
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsPublicationId(String details, Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Publication Id. 
     *
     * @param details Value to match on Details.
     * @param publicationId Value to match on Publication Id.
     */
    public long countByDetailsPublicationId(String details, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and publication_id=? " +
                "");
            s.setString(1,details);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Publication Id. 
     *
     * @param Details Value to match on Details.
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByDetailsPublicationId(String details, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and publication_id=? " +
                "");
            s.setString(1,details);
            s.setLong(2,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status publicationId. 
     *
     * @param status Value to match on Status.
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatusPublicationId(String status, Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? and publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status Publication Id. 
     *
     * @param status Value to match on Status.
     * @param publicationId Value to match on Publication Id.
     */
    public long countByStatusPublicationId(String status, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? and publication_id=? " +
                "");
            s.setString(1,status);
            s.setLong(2,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status Publication Id. 
     *
     * @param Status Value to match on Status.
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByStatusPublicationId(String status, Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? and publication_id=? " +
                "");
            s.setString(1,status);
            s.setLong(2,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on publicationId deleted. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublicationIdDeleted(Long publicationId, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where publication_id=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,publicationId);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Publication Id Deleted. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param deleted Value to match on Deleted.
     */
    public long countByPublicationIdDeleted(Long publicationId, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where publication_id=? and deleted=? " +
                "");
            s.setLong(1,publicationId);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Publication Id Deleted. 
     *
     * @param PublicationId Value to match on Publication Id.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByPublicationIdDeleted(Long publicationId, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where publication_id=? and deleted=? " +
                "");
            s.setLong(1,publicationId);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on publicationId published. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublicationIdPublished(Long publicationId, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where publication_id=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,publicationId);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Publication Id Published. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param published Value to match on Published.
     */
    public long countByPublicationIdPublished(Long publicationId, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where publication_id=? and published=? " +
                "");
            s.setLong(1,publicationId);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Publication Id Published. 
     *
     * @param PublicationId Value to match on Publication Id.
     * @param Published Value to match on Published.
     */
    public long deleteByPublicationIdPublished(Long publicationId, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where publication_id=? and published=? " +
                "");
            s.setLong(1,publicationId);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on publicationId lastUpdate. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublicationIdLastUpdate(Long publicationId, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where publication_id=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,publicationId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Publication Id Last Update. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByPublicationIdLastUpdate(Long publicationId, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where publication_id=? and last_update=? " +
                "");
            s.setLong(1,publicationId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Publication Id Last Update. 
     *
     * @param PublicationId Value to match on Publication Id.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByPublicationIdLastUpdate(Long publicationId, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where publication_id=? and last_update=? " +
                "");
            s.setLong(1,publicationId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on publicationId lastUpdatePersonId. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublicationIdLastUpdatePersonId(Long publicationId, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where publication_id=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,publicationId);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Publication Id Last Update Person Id. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByPublicationIdLastUpdatePersonId(Long publicationId, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where publication_id=? and last_update_person_id=? " +
                "");
            s.setLong(1,publicationId);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Publication Id Last Update Person Id. 
     *
     * @param PublicationId Value to match on Publication Id.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByPublicationIdLastUpdatePersonId(Long publicationId, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where publication_id=? and last_update_person_id=? " +
                "");
            s.setLong(1,publicationId);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name byline. 
     *
     * @param name Value to match on Name.
     * @param byline Value to match on Byline.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameByline(String name, String byline,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and byline=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setString(2,byline);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Byline. 
     *
     * @param name Value to match on Name.
     * @param byline Value to match on Byline.
     */
    public long countByNameByline(String name, String byline) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and byline=? " +
                "");
            s.setString(1,name);
            s.setString(2,byline);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Byline. 
     *
     * @param Name Value to match on Name.
     * @param Byline Value to match on Byline.
     */
    public long deleteByNameByline(String name, String byline) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and byline=? " +
                "");
            s.setString(1,name);
            s.setString(2,byline);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name introduction. 
     *
     * @param name Value to match on Name.
     * @param introduction Value to match on Introduction.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameIntroduction(String name, String introduction,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and introduction=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setString(2,introduction);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Introduction. 
     *
     * @param name Value to match on Name.
     * @param introduction Value to match on Introduction.
     */
    public long countByNameIntroduction(String name, String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and introduction=? " +
                "");
            s.setString(1,name);
            s.setString(2,introduction);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Introduction. 
     *
     * @param Name Value to match on Name.
     * @param Introduction Value to match on Introduction.
     */
    public long deleteByNameIntroduction(String name, String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and introduction=? " +
                "");
            s.setString(1,name);
            s.setString(2,introduction);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name details. 
     *
     * @param name Value to match on Name.
     * @param details Value to match on Details.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameDetails(String name, String details,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and details=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setString(2,details);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Details. 
     *
     * @param name Value to match on Name.
     * @param details Value to match on Details.
     */
    public long countByNameDetails(String name, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and details=? " +
                "");
            s.setString(1,name);
            s.setString(2,details);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Details. 
     *
     * @param Name Value to match on Name.
     * @param Details Value to match on Details.
     */
    public long deleteByNameDetails(String name, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and details=? " +
                "");
            s.setString(1,name);
            s.setString(2,details);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name status. 
     *
     * @param name Value to match on Name.
     * @param status Value to match on Status.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameStatus(String name, String status,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and status=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setString(2,status);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Status. 
     *
     * @param name Value to match on Name.
     * @param status Value to match on Status.
     */
    public long countByNameStatus(String name, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and status=? " +
                "");
            s.setString(1,name);
            s.setString(2,status);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Status. 
     *
     * @param Name Value to match on Name.
     * @param Status Value to match on Status.
     */
    public long deleteByNameStatus(String name, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and status=? " +
                "");
            s.setString(1,name);
            s.setString(2,status);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name deleted. 
     *
     * @param name Value to match on Name.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameDeleted(String name, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Deleted. 
     *
     * @param name Value to match on Name.
     * @param deleted Value to match on Deleted.
     */
    public long countByNameDeleted(String name, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and deleted=? " +
                "");
            s.setString(1,name);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Deleted. 
     *
     * @param Name Value to match on Name.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByNameDeleted(String name, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and deleted=? " +
                "");
            s.setString(1,name);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name published. 
     *
     * @param name Value to match on Name.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNamePublished(String name, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Published. 
     *
     * @param name Value to match on Name.
     * @param published Value to match on Published.
     */
    public long countByNamePublished(String name, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and published=? " +
                "");
            s.setString(1,name);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Published. 
     *
     * @param Name Value to match on Name.
     * @param Published Value to match on Published.
     */
    public long deleteByNamePublished(String name, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and published=? " +
                "");
            s.setString(1,name);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name lastUpdate. 
     *
     * @param name Value to match on Name.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameLastUpdate(String name, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Last Update. 
     *
     * @param name Value to match on Name.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByNameLastUpdate(String name, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and last_update=? " +
                "");
            s.setString(1,name);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Last Update. 
     *
     * @param Name Value to match on Name.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByNameLastUpdate(String name, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and last_update=? " +
                "");
            s.setString(1,name);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name lastUpdatePersonId. 
     *
     * @param name Value to match on Name.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByNameLastUpdatePersonId(String name, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name Last Update Person Id. 
     *
     * @param name Value to match on Name.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByNameLastUpdatePersonId(String name, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? and last_update_person_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name Last Update Person Id. 
     *
     * @param Name Value to match on Name.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByNameLastUpdatePersonId(String name, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? and last_update_person_id=? " +
                "");
            s.setString(1,name);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline introduction. 
     *
     * @param byline Value to match on Byline.
     * @param introduction Value to match on Introduction.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineIntroduction(String byline, String introduction,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and introduction=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setString(2,introduction);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Introduction. 
     *
     * @param byline Value to match on Byline.
     * @param introduction Value to match on Introduction.
     */
    public long countByBylineIntroduction(String byline, String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and introduction=? " +
                "");
            s.setString(1,byline);
            s.setString(2,introduction);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Introduction. 
     *
     * @param Byline Value to match on Byline.
     * @param Introduction Value to match on Introduction.
     */
    public long deleteByBylineIntroduction(String byline, String introduction) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and introduction=? " +
                "");
            s.setString(1,byline);
            s.setString(2,introduction);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline details. 
     *
     * @param byline Value to match on Byline.
     * @param details Value to match on Details.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineDetails(String byline, String details,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and details=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setString(2,details);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Details. 
     *
     * @param byline Value to match on Byline.
     * @param details Value to match on Details.
     */
    public long countByBylineDetails(String byline, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and details=? " +
                "");
            s.setString(1,byline);
            s.setString(2,details);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Details. 
     *
     * @param Byline Value to match on Byline.
     * @param Details Value to match on Details.
     */
    public long deleteByBylineDetails(String byline, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and details=? " +
                "");
            s.setString(1,byline);
            s.setString(2,details);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline status. 
     *
     * @param byline Value to match on Byline.
     * @param status Value to match on Status.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineStatus(String byline, String status,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and status=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setString(2,status);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Status. 
     *
     * @param byline Value to match on Byline.
     * @param status Value to match on Status.
     */
    public long countByBylineStatus(String byline, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and status=? " +
                "");
            s.setString(1,byline);
            s.setString(2,status);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Status. 
     *
     * @param Byline Value to match on Byline.
     * @param Status Value to match on Status.
     */
    public long deleteByBylineStatus(String byline, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and status=? " +
                "");
            s.setString(1,byline);
            s.setString(2,status);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline deleted. 
     *
     * @param byline Value to match on Byline.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineDeleted(String byline, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Deleted. 
     *
     * @param byline Value to match on Byline.
     * @param deleted Value to match on Deleted.
     */
    public long countByBylineDeleted(String byline, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and deleted=? " +
                "");
            s.setString(1,byline);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Deleted. 
     *
     * @param Byline Value to match on Byline.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByBylineDeleted(String byline, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and deleted=? " +
                "");
            s.setString(1,byline);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline published. 
     *
     * @param byline Value to match on Byline.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylinePublished(String byline, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Published. 
     *
     * @param byline Value to match on Byline.
     * @param published Value to match on Published.
     */
    public long countByBylinePublished(String byline, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and published=? " +
                "");
            s.setString(1,byline);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Published. 
     *
     * @param Byline Value to match on Byline.
     * @param Published Value to match on Published.
     */
    public long deleteByBylinePublished(String byline, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and published=? " +
                "");
            s.setString(1,byline);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline lastUpdate. 
     *
     * @param byline Value to match on Byline.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineLastUpdate(String byline, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Last Update. 
     *
     * @param byline Value to match on Byline.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByBylineLastUpdate(String byline, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and last_update=? " +
                "");
            s.setString(1,byline);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Last Update. 
     *
     * @param Byline Value to match on Byline.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByBylineLastUpdate(String byline, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and last_update=? " +
                "");
            s.setString(1,byline);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on byline lastUpdatePersonId. 
     *
     * @param byline Value to match on Byline.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByBylineLastUpdatePersonId(String byline, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where byline=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,byline);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Byline Last Update Person Id. 
     *
     * @param byline Value to match on Byline.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByBylineLastUpdatePersonId(String byline, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where byline=? and last_update_person_id=? " +
                "");
            s.setString(1,byline);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Byline Last Update Person Id. 
     *
     * @param Byline Value to match on Byline.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByBylineLastUpdatePersonId(String byline, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where byline=? and last_update_person_id=? " +
                "");
            s.setString(1,byline);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction details. 
     *
     * @param introduction Value to match on Introduction.
     * @param details Value to match on Details.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionDetails(String introduction, String details,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and details=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setString(2,details);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Details. 
     *
     * @param introduction Value to match on Introduction.
     * @param details Value to match on Details.
     */
    public long countByIntroductionDetails(String introduction, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and details=? " +
                "");
            s.setString(1,introduction);
            s.setString(2,details);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Details. 
     *
     * @param Introduction Value to match on Introduction.
     * @param Details Value to match on Details.
     */
    public long deleteByIntroductionDetails(String introduction, String details) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and details=? " +
                "");
            s.setString(1,introduction);
            s.setString(2,details);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction status. 
     *
     * @param introduction Value to match on Introduction.
     * @param status Value to match on Status.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionStatus(String introduction, String status,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and status=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setString(2,status);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Status. 
     *
     * @param introduction Value to match on Introduction.
     * @param status Value to match on Status.
     */
    public long countByIntroductionStatus(String introduction, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and status=? " +
                "");
            s.setString(1,introduction);
            s.setString(2,status);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Status. 
     *
     * @param Introduction Value to match on Introduction.
     * @param Status Value to match on Status.
     */
    public long deleteByIntroductionStatus(String introduction, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and status=? " +
                "");
            s.setString(1,introduction);
            s.setString(2,status);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction deleted. 
     *
     * @param introduction Value to match on Introduction.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionDeleted(String introduction, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Deleted. 
     *
     * @param introduction Value to match on Introduction.
     * @param deleted Value to match on Deleted.
     */
    public long countByIntroductionDeleted(String introduction, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and deleted=? " +
                "");
            s.setString(1,introduction);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Deleted. 
     *
     * @param Introduction Value to match on Introduction.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByIntroductionDeleted(String introduction, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and deleted=? " +
                "");
            s.setString(1,introduction);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction published. 
     *
     * @param introduction Value to match on Introduction.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionPublished(String introduction, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Published. 
     *
     * @param introduction Value to match on Introduction.
     * @param published Value to match on Published.
     */
    public long countByIntroductionPublished(String introduction, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and published=? " +
                "");
            s.setString(1,introduction);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Published. 
     *
     * @param Introduction Value to match on Introduction.
     * @param Published Value to match on Published.
     */
    public long deleteByIntroductionPublished(String introduction, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and published=? " +
                "");
            s.setString(1,introduction);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction lastUpdate. 
     *
     * @param introduction Value to match on Introduction.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionLastUpdate(String introduction, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Last Update. 
     *
     * @param introduction Value to match on Introduction.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByIntroductionLastUpdate(String introduction, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and last_update=? " +
                "");
            s.setString(1,introduction);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Last Update. 
     *
     * @param Introduction Value to match on Introduction.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByIntroductionLastUpdate(String introduction, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and last_update=? " +
                "");
            s.setString(1,introduction);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on introduction lastUpdatePersonId. 
     *
     * @param introduction Value to match on Introduction.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByIntroductionLastUpdatePersonId(String introduction, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where introduction=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,introduction);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Introduction Last Update Person Id. 
     *
     * @param introduction Value to match on Introduction.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByIntroductionLastUpdatePersonId(String introduction, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where introduction=? and last_update_person_id=? " +
                "");
            s.setString(1,introduction);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Introduction Last Update Person Id. 
     *
     * @param Introduction Value to match on Introduction.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByIntroductionLastUpdatePersonId(String introduction, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where introduction=? and last_update_person_id=? " +
                "");
            s.setString(1,introduction);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details status. 
     *
     * @param details Value to match on Details.
     * @param status Value to match on Status.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsStatus(String details, String status,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and status=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setString(2,status);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Status. 
     *
     * @param details Value to match on Details.
     * @param status Value to match on Status.
     */
    public long countByDetailsStatus(String details, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and status=? " +
                "");
            s.setString(1,details);
            s.setString(2,status);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Status. 
     *
     * @param Details Value to match on Details.
     * @param Status Value to match on Status.
     */
    public long deleteByDetailsStatus(String details, String status) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and status=? " +
                "");
            s.setString(1,details);
            s.setString(2,status);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details deleted. 
     *
     * @param details Value to match on Details.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsDeleted(String details, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Deleted. 
     *
     * @param details Value to match on Details.
     * @param deleted Value to match on Deleted.
     */
    public long countByDetailsDeleted(String details, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and deleted=? " +
                "");
            s.setString(1,details);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Deleted. 
     *
     * @param Details Value to match on Details.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByDetailsDeleted(String details, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and deleted=? " +
                "");
            s.setString(1,details);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details published. 
     *
     * @param details Value to match on Details.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsPublished(String details, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Published. 
     *
     * @param details Value to match on Details.
     * @param published Value to match on Published.
     */
    public long countByDetailsPublished(String details, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and published=? " +
                "");
            s.setString(1,details);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Published. 
     *
     * @param Details Value to match on Details.
     * @param Published Value to match on Published.
     */
    public long deleteByDetailsPublished(String details, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and published=? " +
                "");
            s.setString(1,details);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details lastUpdate. 
     *
     * @param details Value to match on Details.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsLastUpdate(String details, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Last Update. 
     *
     * @param details Value to match on Details.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByDetailsLastUpdate(String details, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and last_update=? " +
                "");
            s.setString(1,details);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Last Update. 
     *
     * @param Details Value to match on Details.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByDetailsLastUpdate(String details, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and last_update=? " +
                "");
            s.setString(1,details);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on details lastUpdatePersonId. 
     *
     * @param details Value to match on Details.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDetailsLastUpdatePersonId(String details, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where details=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,details);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Details Last Update Person Id. 
     *
     * @param details Value to match on Details.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByDetailsLastUpdatePersonId(String details, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where details=? and last_update_person_id=? " +
                "");
            s.setString(1,details);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Details Last Update Person Id. 
     *
     * @param Details Value to match on Details.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByDetailsLastUpdatePersonId(String details, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where details=? and last_update_person_id=? " +
                "");
            s.setString(1,details);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status deleted. 
     *
     * @param status Value to match on Status.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatusDeleted(String status, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status Deleted. 
     *
     * @param status Value to match on Status.
     * @param deleted Value to match on Deleted.
     */
    public long countByStatusDeleted(String status, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? and deleted=? " +
                "");
            s.setString(1,status);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status Deleted. 
     *
     * @param Status Value to match on Status.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByStatusDeleted(String status, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? and deleted=? " +
                "");
            s.setString(1,status);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status published. 
     *
     * @param status Value to match on Status.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatusPublished(String status, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status Published. 
     *
     * @param status Value to match on Status.
     * @param published Value to match on Published.
     */
    public long countByStatusPublished(String status, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? and published=? " +
                "");
            s.setString(1,status);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status Published. 
     *
     * @param Status Value to match on Status.
     * @param Published Value to match on Published.
     */
    public long deleteByStatusPublished(String status, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? and published=? " +
                "");
            s.setString(1,status);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status lastUpdate. 
     *
     * @param status Value to match on Status.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatusLastUpdate(String status, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status Last Update. 
     *
     * @param status Value to match on Status.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByStatusLastUpdate(String status, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? and last_update=? " +
                "");
            s.setString(1,status);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status Last Update. 
     *
     * @param Status Value to match on Status.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByStatusLastUpdate(String status, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? and last_update=? " +
                "");
            s.setString(1,status);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on status lastUpdatePersonId. 
     *
     * @param status Value to match on Status.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByStatusLastUpdatePersonId(String status, Long lastUpdatePersonId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where status=? and last_update_person_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,status);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Status Last Update Person Id. 
     *
     * @param status Value to match on Status.
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long countByStatusLastUpdatePersonId(String status, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where status=? and last_update_person_id=? " +
                "");
            s.setString(1,status);
            s.setLong(2,lastUpdatePersonId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Status Last Update Person Id. 
     *
     * @param Status Value to match on Status.
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     */
    public long deleteByStatusLastUpdatePersonId(String status, Long lastUpdatePersonId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where status=? and last_update_person_id=? " +
                "");
            s.setString(1,status);
            s.setLong(2,lastUpdatePersonId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on deleted published. 
     *
     * @param deleted Value to match on Deleted.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDeletedPublished(Boolean deleted, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where deleted=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setBoolean(1,deleted);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Deleted Published. 
     *
     * @param deleted Value to match on Deleted.
     * @param published Value to match on Published.
     */
    public long countByDeletedPublished(Boolean deleted, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where deleted=? and published=? " +
                "");
            s.setBoolean(1,deleted);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Deleted Published. 
     *
     * @param Deleted Value to match on Deleted.
     * @param Published Value to match on Published.
     */
    public long deleteByDeletedPublished(Boolean deleted, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where deleted=? and published=? " +
                "");
            s.setBoolean(1,deleted);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdate deleted. 
     *
     * @param lastUpdate Value to match on Last Update.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdateDeleted(Date lastUpdate, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Deleted. 
     *
     * @param lastUpdate Value to match on Last Update.
     * @param deleted Value to match on Deleted.
     */
    public long countByLastUpdateDeleted(Date lastUpdate, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update=? and deleted=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Deleted. 
     *
     * @param LastUpdate Value to match on Last Update.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByLastUpdateDeleted(Date lastUpdate, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update=? and deleted=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdatePersonId deleted. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdatePersonIdDeleted(Long lastUpdatePersonId, Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update_person_id=? and deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Person Id Deleted. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param deleted Value to match on Deleted.
     */
    public long countByLastUpdatePersonIdDeleted(Long lastUpdatePersonId, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update_person_id=? and deleted=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Person Id Deleted. 
     *
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByLastUpdatePersonIdDeleted(Long lastUpdatePersonId, Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update_person_id=? and deleted=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdate published. 
     *
     * @param lastUpdate Value to match on Last Update.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdatePublished(Date lastUpdate, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Published. 
     *
     * @param lastUpdate Value to match on Last Update.
     * @param published Value to match on Published.
     */
    public long countByLastUpdatePublished(Date lastUpdate, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update=? and published=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Published. 
     *
     * @param LastUpdate Value to match on Last Update.
     * @param Published Value to match on Published.
     */
    public long deleteByLastUpdatePublished(Date lastUpdate, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update=? and published=? " +
                "");
            s.setTimestamp(1,new java.sql.Timestamp(lastUpdate.getTime()));
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdatePersonId published. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param published Value to match on Published.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdatePersonIdPublished(Long lastUpdatePersonId, Boolean published,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update_person_id=? and published=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,published);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Person Id Published. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param published Value to match on Published.
     */
    public long countByLastUpdatePersonIdPublished(Long lastUpdatePersonId, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update_person_id=? and published=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,published);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Person Id Published. 
     *
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     * @param Published Value to match on Published.
     */
    public long deleteByLastUpdatePersonIdPublished(Long lastUpdatePersonId, Boolean published) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update_person_id=? and published=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setBoolean(2,published);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on lastUpdatePersonId lastUpdate. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param lastUpdate Value to match on Last Update.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByLastUpdatePersonIdLastUpdate(Long lastUpdatePersonId, Date lastUpdate,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where last_update_person_id=? and last_update=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,lastUpdatePersonId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Last Update Person Id Last Update. 
     *
     * @param lastUpdatePersonId Value to match on Last Update Person Id.
     * @param lastUpdate Value to match on Last Update.
     */
    public long countByLastUpdatePersonIdLastUpdate(Long lastUpdatePersonId, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where last_update_person_id=? and last_update=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Last Update Person Id Last Update. 
     *
     * @param LastUpdatePersonId Value to match on Last Update Person Id.
     * @param LastUpdate Value to match on Last Update.
     */
    public long deleteByLastUpdatePersonIdLastUpdate(Long lastUpdatePersonId, Date lastUpdate) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where last_update_person_id=? and last_update=? " +
                "");
            s.setLong(1,lastUpdatePersonId);
            s.setTimestamp(2,new java.sql.Timestamp(lastUpdate.getTime()));
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on name. 
     *
     * @param name Value to match on Name.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByName(String name,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where name=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setString(1,name);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Name. 
     *
     * @param name Value to match on Name.
     */
    public long countByName(String name) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where name=? " +
                "");
            s.setString(1,name);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Name. 
     *
     * @param Name Value to match on Name.
     */
    public long deleteByName(String name) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where name=? " +
                "");
            s.setString(1,name);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on deleted. 
     *
     * @param deleted Value to match on Deleted.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByDeleted(Boolean deleted,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where deleted=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setBoolean(1,deleted);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Deleted. 
     *
     * @param deleted Value to match on Deleted.
     */
    public long countByDeleted(Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where deleted=? " +
                "");
            s.setBoolean(1,deleted);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Deleted. 
     *
     * @param Deleted Value to match on Deleted.
     */
    public long deleteByDeleted(Boolean deleted) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where deleted=? " +
                "");
            s.setBoolean(1,deleted);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Retrieve a set from the Article data source
     * matching on publicationId. 
     *
     * @param publicationId Value to match on Publication Id.
     * @param index Search results should start from this item.
     * @param limit Search results should return at most this many items.
     */
    public List<Article> getByPublicationId(Long publicationId,  long index, long limit) throws IOException {
        List<Article> list=new ArrayList<Article>();
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        Article item=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select id, publication_id, name, byline, introduction, details, status, deleted, published, last_update, last_update_person_id "+
                "from article " +
                "where publication_id=? " +
                "order by name " +
                "limit "+index+","+limit
                );
            s.setLong(1,publicationId);
            results=s.executeQuery();
            while(results.next()) {
                item=new Article();
                item.setId(results.getLong(1));
                item.setPublicationId(results.getLong(2));
                item.setName(results.getString(3));
                item.setByline(results.getString(4));
                item.setIntroduction(results.getString(5));
                item.setDetails(results.getString(6));
                item.setStatus(results.getString(7));
                item.setDeleted(results.getBoolean(8));
                item.setPublished(results.getBoolean(9));
                item.setLastUpdate(results.getDate(10));
                item.setLastUpdatePersonId(results.getLong(11));
                list.add(item);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return list;
    }

    /**
     * Count number of items in the <i>Article</i> data source
     * matching on Publication Id. 
     *
     * @param publicationId Value to match on Publication Id.
     */
    public long countByPublicationId(Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        ResultSet results=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "select count(*)"+
                "from article " +
                "where publication_id=? " +
                "");
            s.setLong(1,publicationId);
            results=s.executeQuery();
            if(results.next()) {
                total=results.getLong(1);
            }
            results.close();
            results=null;
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(results!=null) { try { results.close(); } catch(Exception f){} }
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }

    /**
     * Delete of item(s) in the Article data source
     * matching on Publication Id. 
     *
     * @param PublicationId Value to match on Publication Id.
     */
    public long deleteByPublicationId(Long publicationId) throws IOException {
        long total=0;
        Connection c=null;
        PreparedStatement s=null;
        try {
            c=dataSource.getConnection();
            s=c.prepareStatement(
                "delete from article " +
                "where publication_id=? " +
                "");
            s.setLong(1,publicationId);
            s.executeUpdate();
            s.close();
            s=null;
            c.close();
            c=null;
        } catch(SQLException e) {
            if(s!=null) { try { s.close(); } catch(Exception f){} }
            if(c!=null) { try { c.close(); } catch(Exception f){} }
            throw new IOException(e.toString());
        }

        return total;
    }


}
